server:
  port: 8080

#
# profiles:
#  github, sso : demonstrates redirecting to github to authenticate rather than the local auth server
#  rossoauth2, sso : SSO, redirects to local auth server using code grant to authenticate.  uses simple oauth2 tokens
#  rossjwt, sso : SSO, redirects to local auth server using code grant to authenticate.  uses JWT tokens
#  default: No SSO, assumes a JWT token is provided - no automatic redirect
#
#
gateway:
  swagger:
    docketUri: /v2/api-docs
  services:
    token: http://localhost:8085
    auth: http://localhost:9000
    product: http://localhost:8090
  sessionTracking:
    enabled: false
  security:
    session:
      timeoutSeconds: 1800

ribbon:
  eureka:
    enabled: false
spring:
  jackson:
    serialization:
      write-dates-as-timestamps: false
  application:
    name: rsw-gateway
  profiles:
#     active: sso, rossjwt
     active: nosso, rossjwt
#    active: github, sso
#    active: rossoauth2, sso

zuul:
  routes:
    product-service:
      path: /api/*/product/**
      url: ${gateway.services.product}
      stripPrefix: false
    token-service:
      path: /util/token/**
      url: ${gateway.services.token}/util/token

# Block cookie header fields, but allow Authorization to pass through (disallowed by default)
# Note: this is mostly pertinent in non-SSO ResourceServer mode; for SSO, gateway will re-write Authorization anyway
  sensitive-headers: Cookie, Set-Cookie
# by default, zuul will add proxy headers, e.g. x-forwarded-host and x-forwarded-prefix, should leave on in general
#  add-proxy-headers: false

logging:
  level:
    org.springframework.cloud.netflix.zuul: debug
    org.springframework.security: info

security:
  basic:
    enabled: false
  sessions: stateless
  oauth2:
# oauth2 resource server filter order changed to -1 in Spring Boot 1.5; setting back to previous working order
    resource:
      filterOrder: 3

---
spring:
  profiles: github

# External Auth - github using oauth2 tokens
#  This clientId has an OAuth2 application authorization configured which expects the client to be localhost:8080
security:
  oauth2:
    client:
      clientId: 7f4d9a2a316f28a4e2f0
      clientSecret: 9f7172c07f57b341d8f804bc700fcb3c8e3672b4
      accessTokenUri: https://github.com/login/oauth/access_token
      userAuthorizationUri: https://github.com/login/oauth/authorize
      clientAuthenticationScheme: form
      access-token-validity-seconds: 30
    resource:
      userInfoUri: https://api.github.com/user
      preferTokenInfo: false

---
spring:
  profiles: rossoauth2

# Internal Auth server using oauth2 tokens
security:
  oauth2:
    client:
      clientId: rsw
      clientSecret: rswsecret
      accessTokenUri: ${gateway.services.auth}/oauth/token
      userAuthorizationUri: ${gateway.services.auth}/oauth/authorize
    resource:
      userInfoUri: ${gateway.services.auth}/user

---
spring:
  profiles: rossjwt

security:
  oauth2:
    client:
      clientId: rsw
      clientSecret: rswsecret
      accessTokenUri: ${gateway.services.auth}/oauth/token
      userAuthorizationUri: ${gateway.services.auth}/oauth/authorize
    resource:
      jwt:
        keyValue: abracadabra

---
spring:
  profiles: nosso

#
# The proxy.auth.routes properties dictate downstream token handling properties when @EnableOAuth2Sso is in effect.
# Note that to use passthru, Spring security would need to be disabled on the Gateway since the security filters
# are protecting Zuul, which triggers oauth2 token exchanges in this case
#   Values:
#     oauth2 : (default) token relay, for services that act as clients and want their own token
#     passthru: bearer token passed through as-is to downstream service
#     none: no token is passed through
#
proxy:
  auth:
    routes:
      product-service: passthru

---
spring:
  profiles: sso

#
# The proxy.auth.routes properties dictate downstream token handling properties when @EnableOAuth2Sso is in effect.
# Note that to use passthru, Spring security would need to be disabled on the Gateway since the security filters
# are protecting Zuul, which triggers oauth2 token exchanges in this case
#   Values:
#     oauth2 : (default) token relay, for services that act as clients and want their own token
#     passthru: bearer token passed through as-is to downstream service
#     none: no token is passed through
#
proxy:
  auth:
    routes:
      product-service: oauth2

# this is done to avoid cookie domain/path confusion
server:
  context-path: /gw
